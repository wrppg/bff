name: Build - RootActivityLauncher

on:
  workflow_dispatch:

env:
  APK_NAME: "RootActivityLauncher"
  NEW_APP_ID: "bff.rootactivitylauncher"
  FLAV: ""

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - uses: actions/checkout@v4
        with:
          repository: "zacharee/RootActivityLauncher"
          ref: "master"

      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle" # Cache Gradle dependencies to speed up builds

      - name: Download and Install Modified Android JARs
        run: |
          # see https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md
          # for pre-defined Environment variables (i.e. ANDROID_HOME, ANDROID_SDK_ROOT)

          API_LEVEL=$(curl -sL https://raw.githubusercontent.com/zacharee/RootActivityLauncher/refs/heads/master/app/build.gradle.kts | awk '/compileSdk( |=)/ {print $NF; exit}')
          echo ${API_LEVEL} | grep -E '^[0-9]+$' || exit 1

          TARGET_DIR="$ANDROID_SDK_ROOT/platforms/android-${API_LEVEL}"

          # Create the target directory if it doesn't exist
          mkdir -p "$TARGET_DIR" || { echo "Failed to create directory $TARGET_DIR"; exit 1; }

          # Download the modified android.jar from Reginer/aosp-android-jar
          curl -L -o "$TARGET_DIR/android.jar" "https://github.com/Reginer/aosp-android-jar/raw/refs/heads/main/android-${API_LEVEL}/android.jar"
          [[ $? -ne 0 ]] && exit 1
          echo "android.jar downloaded successfully."

      - name: Change versionCode To Max INT
        run: |
          BUILD_GRADLE=$(find app -maxdepth 1 \( -name 'build.gradle' -or -name 'build.gradle.kts' \) -print -quit)
          # Do this because some use versionName = versionCode.toString() #
          OLD_VER_CODE=$(awk '/^\s*versionCode/ {print $NF; exit}' $BUILD_GRADLE)
          sed -E "/^\s*versionName/s/versionCode\.toString\(\)/\"${OLD_VER_CODE}\"/" -i $BUILD_GRADLE
          #
          sed -E '/^\s*versionCode/s/[0-9]+$/2147483647/' -i $BUILD_GRADLE

      - name: Change app and package name
        run: |
          BUILD_GRADLE=$(find app -maxdepth 1 \( -name 'build.gradle' -or -name 'build.gradle.kts' \) -print -quit)
          APP_ID=$(awk -F '"' '/applicationId( |=)/ {print $2; exit}' $BUILD_GRADLE)
          sed -E "/applicationId( |=)/s|${APP_ID}|${NEW_APP_ID}|" -i $BUILD_GRADLE

      - name: Remove Pre-defined APK Name
        run: |
          BUILD_GRADLE=$(find app -maxdepth 1 \( -name 'build.gradle' -or -name 'build.gradle.kts' \) -print -quit)
          sed -E '/archives(Base)*Name/d' -i $BUILD_GRADLE

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew :app:assemble${FLAV^}Release

      - name: List APKs
        run: find app -name '*.apk'

      # - name: Upload APK artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: RootActivityLauncher-APK                 # Name of the artifact
      #     path: app/build/outputs/apk/release/*.apk     # Path to the release APK files
      #     retention-days: 5                             # Keep the artifact for 5 days

      - name: Set Env
        run: |
          APK_PATH_PREFIX="app/build/outputs/apk/${FLAV:+$FLAV/}release"
          # APK_UNSIGNED_NAME="app${FLAV:+"-$FLAV"}-release-unsigned.apk"
          APK_FILE=$(find ${APK_PATH_PREFIX} \( -iname "app${FLAV:+"-$FLAV"}-release-unsigned.apk" -o -iname "app${FLAV:+"-$FLAV"}-release.apk" -o -iname '*arm64-v8*' \) -print -quit)
          echo "APK_PATH_PREFIX=${APK_PATH_PREFIX}" >> $GITHUB_ENV
          echo "APK_UNSIGNED_NAME=${APK_UNSIGNED_NAME}" >> $GITHUB_ENV
          echo "APK_FILE=${APK_FILE}" >> $GITHUB_ENV

      - name: Sign APK
        env:
          KEYSTORE: ${{ secrets.SIGNING_KEY }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          echo "${KEYSTORE}" | base64 -d > apksign.keystore
          versionName=$( jq -r '.elements[0].versionName' ${APK_PATH_PREFIX}/output-metadata.json )
          # APK_UNSIGNED_NAME="app${FLAV:+"-$FLAV"}-release-unsigned.apk"
          # ${ANDROID_HOME}/build-tools/34.0.0/apksigner sign --ks apksign.keystore --ks-pass env:SIGNING_STORE_PASSWORD ${APK_PATH_PREFIX}/${APK_UNSIGNED_NAME}

          for apk in ${APK_PATH_PREFIX}/*.apk; do ${ANDROID_HOME}/build-tools/34.0.0/apksigner sign --ks apksign.keystore --ks-pass env:SIGNING_STORE_PASSWORD $apk; done

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GH_APK_REPO }}
          # GH_TOKEN: ${{ github.token }}
        run: |
          versionName=$( jq -r '.elements[0].versionName' ${APK_PATH_PREFIX}/output-metadata.json )
          # APK_UNSIGNED_NAME="app${FLAV:+"-$FLAV"}-release-unsigned.apk"
          # mv ${APK_PATH_PREFIX}/${APK_UNSIGNED_NAME} ${APK_PATH_PREFIX}/${APK_NAME}_${versionName}.apk
          mv ${APK_FILE} ${APK_PATH_PREFIX}/${APK_NAME}_${versionName}.apk
          gh release create "${versionName}-${APK_NAME}" --title "${APK_NAME} ${versionName}" --repo wrppg/apk ${APK_PATH_PREFIX}/*.apk

          # gh release upload "${versionName}-${APK_NAME}" ${APK_PATH_PREFIX}/*.apk
